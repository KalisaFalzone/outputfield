generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String    @unique @db.VarChar(255)
  password  String?
  email     String    @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @map(name: "created_at")

  // Relation fields
  // tokens    Token[]
  // projects  Project[]
  artist    Artist?
  // curator     Curator?
  // venue     Venue?
}

model Artist {
  id                Int       @id @default(autoincrement())
  title             String    @default("")
  pronoun           String?   @default("")
  createdAt         DateTime  @default(now()) @map(name: "created_at")
  bio               String    @default("")
  location          String    @default("")
  iconColor         String    @default("")
  handle            String    @unique @db.VarChar(255) 
  mediums           String[]
  mediumsOfInterest String[]

  // Relation fields
  work              Work[]
  links             Link[]

  referrerId        Int?      
  referredBy        Artist?   @relation("ArtistReference", fields: [referrerId], references: [id])
  referred          Artist?  @relation("ArtistReference")

  //tokens    Token[]
  //projects  Project[]
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
}

// TODO:
// model Curator {
//   id        Int       @id @default(autoincrement())
  // user       User     @relation(fields: [userId], references: [id])
  // userId     Int
// }

// TODO:
// model Venue {
//   id        Int       @id @default(autoincrement())
  // user       User     @relation(fields: [userId], references: [id])
  // userId     Int
// }

// model Token {
//   id         Int       @id @default(autoincrement())
//   createdAt  DateTime  @default(now())
//   updatedAt  DateTime  @updatedAt
//   type       TokenType
//   emailToken String?   @unique // Only used for short lived email tokens
//   valid      Boolean   @default(true)
//   expiration DateTime

//   // Relation fields
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
// }

// model Project {
//   id            Int      @id @default(autoincrement())
//   title         String?  @db.VarChar(255)
//   contributors  User[]
// }

model Work {
  id        Int       @id @default(autoincrement())
  type      String?   @default("")
  link      String    @default("")

  artist    Artist    @relation(fields: [artistID], references: [id])
  artistID  Int
}

model Link {
  id        Int    @id @default(autoincrement())
  type      String?   @default("")
  link      String    @default("")

  artist    Artist @relation(fields: [artistID], references: [id])
  artistID  Int
}

// enum TokenType {
//   EMAIL // used as a short lived token sent to the user's email
//   API
// }
